{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","firstQuery","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","lowerCase","title","toLowerCase","filterLowerCase","completed","includes","length","className","map","id","isActive","classNames","onClick","TodoFilter","onSubmit","event","preventDefault","onChange","e","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","dispach","useState","user","setUser","userId","useEffect","getUser","href","email","name","App","result","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2eeefbba.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type FilterState = {\n  query?: string,\n  status?: string\n};\n\ntype ActionQuery = {\n  type: 'filter/QUERY',\n  payload: FilterState,\n};\n\ntype ActionSatus = {\n  type: 'filter/STATUS',\n  payload: FilterState,\n};\n\ntype Actions = ActionSatus | ActionQuery;\n\nconst setQuery = (query: string) :ActionQuery => ({\n  type: 'filter/QUERY',\n  payload: { query },\n});\n\nconst setStatus = (status: string) :ActionSatus => ({\n  type: 'filter/STATUS',\n  payload: { status },\n});\n\nexport const actions = { setQuery, setStatus };\n\nconst firstQuery = { query: '', status: 'all' };\n\nconst filterReducer = (\n  state: FilterState = firstQuery,\n  action: Actions,\n) => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return {\n        ...state,\n        query: action.payload.query,\n      };\n    case 'filter/STATUS':\n      return {\n        ...state,\n        status: action.payload.status,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'currentTodos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'currentTodos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[] | null;\ntype Action = SetTodosAction;\n\nconst todosReducer = (state: State = null, action: Action): State => {\n  switch (action.type) {\n    case 'currentTodos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector((state) => state.todos);\n  const filter = useAppSelector((state) => state.filter);\n\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  const filteredTodos: Todo[] | undefined = useMemo(() => {\n    const newArray = todos?.filter((todo) => {\n      const lowerCase = todo.title.toLowerCase();\n      const filterLowerCase = filter.query?.toLowerCase() || '';\n\n      switch (filter.status) {\n        case 'active':\n          return !todo.completed && lowerCase.includes(filterLowerCase);\n        case 'completed':\n          return todo.completed && lowerCase.includes(filterLowerCase);\n        default:\n          return true && lowerCase.includes(filterLowerCase);\n      }\n    });\n\n    return newArray;\n  }, [filter]);\n\n  return (\n    <>\n      {filteredTodos?.length !== 0 ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos?.map((todo) => {\n              const { id, title, completed } = todo;\n\n              const isActive = () => id === currentTodo?.id;\n\n              return (\n                <tr\n                  data-cy=\"todo\"\n                  key={id}\n                  className={classNames({\n                    'className=\"has-background-info-light': isActive(),\n                  })}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames('has-text-success', {\n                        'has-text-danger': !completed,\n                      })}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => {\n                        dispatch(actions.setTodo(todo));\n                      }}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames(\n                            'far',\n                            { 'fa-eye-slash': isActive() },\n                            { 'fa-eye': !isActive() },\n                          )}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { actions } from '../../features/filter';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n  const handlerSelector = (e: React.ChangeEvent<HTMLSelectElement>) => (\n    dispatch(actions.setStatus(e.target.value))\n  );\n  const handlerQuery = (e: React.ChangeEvent<HTMLInputElement>) => (\n    dispatch(actions.setQuery(e.target.value))\n  );\n  const handlerQueryCancel = () => (\n    dispatch(actions.setQuery(''))\n  );\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handlerSelector}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handlerQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handlerQueryCancel}\n              />\n            </>\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const dispach = useAppDispatch();\n  const currentTodo: Todo | null = useAppSelector((state) => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const {\n    id, title, completed, userId = 0,\n  } = currentTodo || {};\n\n  useEffect(() => {\n    getUser(userId).then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                dispach(actions.removeTodo());\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const dispach = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getTodos()\n      .then(result => (dispach(actions.setTodos(result))));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n            {todos ? <TodoList /> : <Loader />}\n            <div className=\"block\" />\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}